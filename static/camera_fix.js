// üé• Improved Camera Access Handler for Emotion Recognition
// Better error handling and user guidance

// Test camera directly
window.testCameraDirectly = async function() {
    try {
        showInfo('üß™ ƒêang test camera tr·ª±c ti·∫øp...');
        
        const testStream = await navigator.mediaDevices.getUserMedia({ video: true });
        testStream.getTracks().forEach(track => track.stop());
        
        showSuccess('‚úÖ Camera hardware ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng! V·∫•n ƒë·ªÅ c√≥ th·ªÉ l√† ·ªü constraints ho·∫∑c permissions.');
        
    } catch (err) {
        showError(`‚ùå Camera hardware test failed: ${err.name} - ${err.message}`);
    }
};

// Show detailed instructions
window.showDetailedInstructions = function() {
    const instructions = `
        <div class="alert alert-info mt-3" style="text-align: left;">
            <h6><i class="fas fa-tools"></i> H∆∞·ªõng D·∫´n Kh·∫Øc Ph·ª•c Chi Ti·∫øt:</h6>
            
            <div class="mt-3">
                <strong>üîß Windows Camera Privacy:</strong>
                <ol>
                    <li>B·∫•m <kbd>Win + I</kbd> ‚Üí Privacy & Security</li>
                    <li>Camera ‚Üí B·∫≠t "Let apps access your camera"</li>
                    <li>Desktop apps ‚Üí B·∫≠t cho browser</li>
                </ol>
            </div>
            
            <div class="mt-3">
                <strong>üåê Chrome Settings:</strong>
                <ol>
                    <li>V√†o <code>chrome://settings/content/camera</code></li>
                    <li>Th√™m site n√†y v√†o "Allow" list</li>
                    <li>Ho·∫∑c click üîí icon ‚Üí Camera = Allow</li>
                </ol>
            </div>
            
            <div class="mt-3">
                <strong>‚ö° Quick Fix:</strong>
                <ol>
                    <li>ƒê√≥ng t·∫•t c·∫£ tabs/windows c·ªßa browser</li>
                    <li>Restart browser ho√†n to√†n</li>
                    <li>M·ªü l·∫°i v√† cho ph√©p camera access</li>
                </ol>
            </div>
            
            <div class="mt-3">
                <strong>üì± Alternative:</strong>
                <p>Th·ª≠ m·ªü tr√™n ƒëi·ªán tho·∫°i c√πng WiFi: <code>${window.location.origin}</code></p>
            </div>
            
            <div class="mt-3">
                <button class="btn btn-sm btn-success" onclick="window.location.reload()">
                    üîÑ Th·ª≠ L·∫°i
                </button>
                <button class="btn btn-sm btn-info" onclick="testCameraDirectly()">
                    üß™ Test Camera
                </button>
            </div>
        </div>
    `;
    
    const errorDiv = document.getElementById('error-message');
    if (errorDiv) {
        errorDiv.innerHTML = instructions;
    }
};

// Enhanced error handling for camera access
window.handleCameraError = function(err) {
    console.error('Camera error:', err);
    
    let errorMsg = '‚ùå Kh√¥ng th·ªÉ truy c·∫≠p camera. ';
    let solution = '';
    
    switch(err.name) {
        case 'NotAllowedError':
            errorMsg += 'B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn camera.';
            solution = `
                <div class="mt-3">
                    <strong>üí° C√°ch kh·∫Øc ph·ª•c:</strong>
                    <ol class="mt-2 text-start">
                        <li>Click v√†o bi·ªÉu t∆∞·ª£ng <strong>üîí</strong> b√™n tr√°i URL</li>
                        <li>ƒê·ªïi Camera t·ª´ "Block" th√†nh "Allow"</li>
                        <li>Refresh trang (F5) v√† th·ª≠ l·∫°i</li>
                    </ol>
                    <div class="mt-2">
                        <button class="btn btn-sm btn-info" onclick="window.open('chrome://settings/content/camera', '_blank')">
                            üîß Chrome Camera Settings
                        </button>
                        <button class="btn btn-sm btn-warning" onclick="showDetailedInstructions()">
                            üìã H∆∞·ªõng D·∫´n Chi Ti·∫øt
                        </button>
                    </div>
                </div>
            `;
            break;
            
        case 'NotFoundError':
            errorMsg += 'Kh√¥ng t√¨m th·∫•y camera.';
            solution = `
                <div class="mt-3">
                    <strong>üí° Ki·ªÉm tra:</strong>
                    <ul class="mt-2 text-start">
                        <li>Camera c√≥ ƒë∆∞·ª£c k·∫øt n·ªëi kh√¥ng?</li>
                        <li>Th·ª≠ m·ªü Camera app c·ªßa Windows</li>
                        <li>Restart computer n·∫øu c·∫ßn</li>
                    </ul>
                    <button class="btn btn-sm btn-warning" onclick="showDetailedInstructions()">
                        üìã H∆∞·ªõng D·∫´n Chi Ti·∫øt
                    </button>
                </div>
            `;
            break;
            
        case 'NotReadableError':
            errorMsg += 'Camera ƒëang ƒë∆∞·ª£c d√πng b·ªüi app kh√°c.';
            solution = `
                <div class="mt-3">
                    <strong>üí° ƒê√≥ng c√°c app sau:</strong>
                    <ul class="mt-2 text-start">
                        <li>Skype, Teams, Zoom, OBS Studio</li>
                        <li>Tabs browser kh√°c ƒëang d√πng camera</li>
                        <li>Windows Camera app</li>
                    </ul>
                    <div class="mt-2">
                        <button class="btn btn-sm btn-success" onclick="window.location.reload()">
                            üîÑ Th·ª≠ L·∫°i
                        </button>
                        <button class="btn btn-sm btn-warning" onclick="showDetailedInstructions()">
                            üìã H∆∞·ªõng D·∫´n Chi Ti·∫øt
                        </button>
                    </div>
                </div>
            `;
            break;
            
        case 'OverconstrainedError':
            errorMsg += 'Camera kh√¥ng h·ªó tr·ª£ settings y√™u c·∫ßu.';
            solution = `
                <div class="mt-3">
                    <strong>üí° ƒêang th·ª≠ v·ªõi ch·∫•t l∆∞·ª£ng th·∫•p h∆°n...</strong>
                    <div class="mt-2">
                        <button class="btn btn-sm btn-info" onclick="tryLowerQualityCamera()">
                            üìπ Th·ª≠ Camera Ch·∫•t L∆∞·ª£ng Th·∫•p
                        </button>
                    </div>
                </div>
            `;
            break;
            
        case 'SecurityError':
            errorMsg += 'L·ªói b·∫£o m·∫≠t - c·∫ßn HTTPS.';
            solution = `
                <div class="mt-3">
                    <strong>üí° Gi·∫£i ph√°p:</strong>
                    <ul class="mt-2 text-start">
                        <li>ƒê·∫£m b·∫£o URL l√† <code>https://</code> ho·∫∑c <code>localhost</code></li>
                        <li>N·∫øu deploy online, c·∫ßn HTTPS</li>
                    </ul>
                    <div class="alert alert-warning mt-2">
                        <small>Current URL: <code>${window.location.href}</code></small>
                    </div>
                </div>
            `;
            break;
            
        default:
            errorMsg += `L·ªói kh√¥ng x√°c ƒë·ªãnh: ${err.message}`;
            solution = `
                <div class="mt-3">
                    <strong>üí° Th·ª≠ c√°c b∆∞·ªõc sau:</strong>
                    <ol class="mt-2 text-start">
                        <li>Th·ª≠ browser kh√°c (Chrome, Firefox, Edge)</li>
                        <li>Restart browser ho√†n to√†n</li>
                        <li>Ki·ªÉm tra Windows Camera Privacy Settings</li>
                        <li>Update browser l√™n phi√™n b·∫£n m·ªõi nh·∫•t</li>
                    </ol>
                    <div class="mt-3">
                        <button class="btn btn-sm btn-info" onclick="testCameraDirectly()">
                            üß™ Test Camera
                        </button>
                        <button class="btn btn-sm btn-warning" onclick="showDetailedInstructions()">
                            üìã H∆∞·ªõng D·∫´n Chi Ti·∫øt
                        </button>
                        <button class="btn btn-sm btn-success" onclick="window.location.reload()">
                            üîÑ Th·ª≠ L·∫°i
                        </button>
                    </div>
                </div>
            `;
    }
    
    showError(errorMsg + solution);
};

// Try lower quality camera
window.tryLowerQualityCamera = async function() {
    try {
        showInfo('üîÑ ƒêang th·ª≠ v·ªõi ch·∫•t l∆∞·ª£ng camera th·∫•p h∆°n...');
        
        const stream = await navigator.mediaDevices.getUserMedia({ 
            video: { 
                width: { ideal: 320 }, 
                height: { ideal: 240 }
            } 
        });
        
        const video = document.getElementById('video');
        video.srcObject = stream;
        video.style.display = 'block';
        
        const placeholder = document.getElementById('camera-placeholder');
        placeholder.style.display = 'none';
        
        showSuccess('‚úÖ Camera k·∫øt n·ªëi th√†nh c√¥ng v·ªõi ch·∫•t l∆∞·ª£ng th·∫•p!');
        
        // Continue with normal flow
        const startBtn = document.getElementById('startRealTime');
        const pauseBtn = document.getElementById('pauseRealTime');
        const stopBtn = document.getElementById('stopRealTime');
        
        startBtn.style.display = 'none';
        pauseBtn.style.display = 'inline-block';
        stopBtn.style.display = 'inline-block';
        
    } catch (err) {
        handleCameraError(err);
    }
};

// Show info message
function showInfo(message) {
    const errorDiv = document.getElementById('error-message');
    if (errorDiv) {
        errorDiv.innerHTML = `
            <div class="alert alert-info alert-custom mt-3">
                <i class="fas fa-info-circle"></i> ${message}
            </div>
        `;
    }
}

// Show success message
function showSuccess(message) {
    const errorDiv = document.getElementById('error-message');
    if (errorDiv) {
        errorDiv.innerHTML = `
            <div class="alert alert-success alert-custom mt-3">
                <i class="fas fa-check-circle"></i> ${message}
            </div>
        `;
        
        // Auto-hide success message after 3 seconds
        setTimeout(() => {
            const successAlert = errorDiv.querySelector('.alert-success');
            if (successAlert) {
                successAlert.style.opacity = '0';
                setTimeout(() => {
                    if (successAlert.parentNode) {
                        successAlert.remove();
                    }
                }, 500);
            }
        }, 3000);
    }
}

// Show error message
function showError(message) {
    const errorDiv = document.getElementById('error-message');
    if (errorDiv) {
        errorDiv.innerHTML = `
            <div class="alert alert-danger alert-custom mt-3">
                <i class="fas fa-exclamation-triangle"></i> ${message}
            </div>
        `;
    }
}

// Auto-initialize camera fixes when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('üé• Camera Fix Script Loaded');
    
    // Add improved click handler for start button
    const startBtn = document.getElementById('startRealTime');
    if (startBtn) {
        // Store original handler
        const originalHandler = startBtn.onclick;
        
        // Replace with improved handler
        startBtn.addEventListener('click', async function(e) {
            e.preventDefault();
            
            try {
                // Check if getUserMedia is supported
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    showError('‚ùå Camera API kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. H√£y s·ª≠ d·ª•ng Chrome, Firefox ho·∫∑c Edge m·ªõi nh·∫•t.');
                    return;
                }

                showInfo('üîÑ ƒêang y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera...');
                
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        width: { ideal: 640 }, 
                        height: { ideal: 480 },
                        facingMode: 'user'
                    } 
                });
                
                const video = document.getElementById('video');
                video.srcObject = stream;
                
                // Continue with normal flow
                video.style.display = 'block';
                document.getElementById('camera-placeholder').style.display = 'none';
                startBtn.style.display = 'none';
                document.getElementById('pauseRealTime').style.display = 'inline-block';
                document.getElementById('stopRealTime').style.display = 'inline-block';
                document.getElementById('realtime-results').style.display = 'block';
                
                // Show overlays
                document.getElementById('emotion-overlay').style.display = 'block';
                document.getElementById('confidence-overlay').style.display = 'block';
                document.getElementById('real-time-indicator').style.display = 'block';
                
                showSuccess('‚úÖ Camera k·∫øt n·ªëi th√†nh c√¥ng! B·∫Øt ƒë·∫ßu ph√¢n t√≠ch c·∫£m x√∫c...');
                
                // Call original handler if exists
                if (originalHandler) {
                    originalHandler.call(this, e);
                }
                
            } catch (err) {
                handleCameraError(err);
            }
        });
    }
    
    // Show initial help message
    setTimeout(() => {
        const errorDiv = document.getElementById('error-message');
        if (errorDiv && !errorDiv.innerHTML.trim()) {
            errorDiv.innerHTML = `
                <div class="alert alert-info alert-custom mt-3">
                    <i class="fas fa-lightbulb"></i> 
                    <strong>üí° M·∫πo:</strong> N·∫øu g·∫∑p l·ªói camera, h√£y ƒë·∫£m b·∫£o ƒë√£ cho ph√©p truy c·∫≠p camera cho browser n√†y.
                    <button class="btn btn-sm btn-outline-info ms-2" onclick="showDetailedInstructions()">
                        üìã Xem H∆∞·ªõng D·∫´n
                    </button>
                </div>
            `;
        }
    }, 2000);
});

console.log('üé• Enhanced Camera Fix Script Loaded Successfully!'); 