#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ xem n·ªôi dung c∆° s·ªü d·ªØ li·ªáu SQLite
Database Viewer for Emotion Recognition System
"""

import sqlite3
import pandas as pd
from datetime import datetime
import os

def connect_db():
    """K·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu"""
    if not os.path.exists('emotion_app.db'):
        print("‚ùå Kh√¥ng t√¨m th·∫•y file c∆° s·ªü d·ªØ li·ªáu: emotion_app.db")
        return None
    
    try:
        conn = sqlite3.connect('emotion_app.db')
        print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi c∆° s·ªü d·ªØ li·ªáu!")
        return conn
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return None

def show_tables(conn):
    """Hi·ªÉn th·ªã danh s√°ch c√°c b·∫£ng"""
    print("\n" + "="*50)
    print("üìã DANH S√ÅCH C√ÅC B·∫¢NG TRONG CSDL")
    print("="*50)
    
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    
    for i, table in enumerate(tables, 1):
        print(f"{i}. {table[0]}")
    
    return [table[0] for table in tables]

def show_table_structure(conn, table_name):
    """Hi·ªÉn th·ªã c·∫•u tr√∫c b·∫£ng"""
    print(f"\n" + "="*50)
    print(f"üèóÔ∏è  C·∫§U TR√öC B·∫¢NG: {table_name.upper()}")
    print("="*50)
    
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({table_name});")
    columns = cursor.fetchall()
    
    print(f"{'STT':<4} {'T√™n c·ªôt':<15} {'Ki·ªÉu DL':<12} {'NOT NULL':<10} {'M·∫∑c ƒë·ªãnh':<12} {'PK':<5}")
    print("-" * 70)
    
    for col in columns:
        cid, name, dtype, notnull, default, pk = col
        print(f"{cid+1:<4} {name:<15} {dtype:<12} {'Yes' if notnull else 'No':<10} {str(default) if default else 'NULL':<12} {'Yes' if pk else 'No':<5}")

def show_table_data(conn, table_name, limit=10):
    """Hi·ªÉn th·ªã d·ªØ li·ªáu trong b·∫£ng"""
    print(f"\n" + "="*50)
    print(f"üìä D·ªÆ LI·ªÜU B·∫¢NG: {table_name.upper()} (Gi·ªõi h·∫°n {limit} d√≤ng)")
    print("="*50)
    
    try:
        # ƒê·∫øm t·ªïng s·ªë d√≤ng
        cursor = conn.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        total_rows = cursor.fetchone()[0]
        print(f"üìà T·ªïng s·ªë d√≤ng: {total_rows}")
        
        if total_rows == 0:
            print("‚ö†Ô∏è  B·∫£ng r·ªóng!")
            return
        
        # L·∫•y d·ªØ li·ªáu m·∫´u
        df = pd.read_sql_query(f"SELECT * FROM {table_name} LIMIT {limit}", conn)
        print(f"\nüìã D·ªØ li·ªáu m·∫´u ({min(limit, total_rows)} d√≤ng ƒë·∫ßu):")
        print(df.to_string(index=False))
        
        if total_rows > limit:
            print(f"\n... v√† {total_rows - limit} d√≤ng kh√°c")
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {e}")

def show_user_statistics(conn):
    """Hi·ªÉn th·ªã th·ªëng k√™ ng∆∞·ªùi d√πng"""
    print(f"\n" + "="*50)
    print("üë• TH·ªêNG K√ä NG∆Ø·ªúI D√ôNG")
    print("="*50)
    
    try:
        # T·ªïng s·ªë ng∆∞·ªùi d√πng
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        print(f"üë§ T·ªïng s·ªë ng∆∞·ªùi d√πng: {total_users}")
        
        # Ng∆∞·ªùi d√πng t·∫°o g·∫ßn ƒë√¢y
        cursor.execute("SELECT username, created_at FROM users ORDER BY created_at DESC LIMIT 5")
        recent_users = cursor.fetchall()
        print(f"\nüÜï Ng∆∞·ªùi d√πng t·∫°o g·∫ßn ƒë√¢y:")
        for user in recent_users:
            print(f"   ‚Ä¢ {user[0]} - {user[1]}")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

def show_emotion_statistics(conn):
    """Hi·ªÉn th·ªã th·ªëng k√™ c·∫£m x√∫c"""
    print(f"\n" + "="*50)
    print("üòä TH·ªêNG K√ä C·∫¢M X√öC")
    print("="*50)
    
    try:
        # T·ªïng s·ªë ph√¢n t√≠ch
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM emotion_logs")
        total_logs = cursor.fetchone()[0]
        print(f"üìä T·ªïng s·ªë l·∫ßn ph√¢n t√≠ch: {total_logs}")
        
        if total_logs == 0:
            print("‚ö†Ô∏è  Ch∆∞a c√≥ d·ªØ li·ªáu c·∫£m x√∫c!")
            return
        
        # Th·ªëng k√™ theo c·∫£m x√∫c
        cursor.execute("""
            SELECT emotion, COUNT(*) as count, 
                   ROUND(AVG(confidence), 3) as avg_confidence
            FROM emotion_logs 
            GROUP BY emotion 
            ORDER BY count DESC
        """)
        emotion_stats = cursor.fetchall()
        
        print(f"\nüìà Ph√¢n b·ªë c·∫£m x√∫c:")
        print(f"{'C·∫£m x√∫c':<12} {'S·ªë l·∫ßn':<8} {'T·ª∑ l·ªá':<8} {'ƒê·ªô tin c·∫≠y TB':<15}")
        print("-" * 50)
        
        for emotion, count, avg_conf in emotion_stats:
            percentage = (count / total_logs) * 100
            print(f"{emotion:<12} {count:<8} {percentage:>5.1f}% {avg_conf:<15}")
        
        # Top users
        cursor.execute("""
            SELECT u.username, COUNT(el.id) as detection_count
            FROM users u
            LEFT JOIN emotion_logs el ON u.id = el.user_id
            GROUP BY u.id, u.username
            ORDER BY detection_count DESC
            LIMIT 5
        """)
        top_users = cursor.fetchall()
        
        print(f"\nüèÜ Top ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông:")
        for user, count in top_users:
            print(f"   ‚Ä¢ {user}: {count} l·∫ßn ph√¢n t√≠ch")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

def main():
    """H√†m ch√≠nh"""
    print("üéØ C√îNG C·ª§ XEM C∆† S·ªû D·ªÆ LI·ªÜU - EMOTION RECOGNITION")
    print("=" * 60)
    
    # K·∫øt n·ªëi database
    conn = connect_db()
    if not conn:
        return
    
    try:
        # Hi·ªÉn th·ªã danh s√°ch b·∫£ng
        tables = show_tables(conn)
        
        # Hi·ªÉn th·ªã c·∫•u tr√∫c v√† d·ªØ li·ªáu t·ª´ng b·∫£ng
        for table in tables:
            show_table_structure(conn, table)
            show_table_data(conn, table, limit=5)
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        show_user_statistics(conn)
        show_emotion_statistics(conn)
        
        print(f"\n" + "="*60)
        print("‚úÖ Ho√†n th√†nh xem c∆° s·ªü d·ªØ li·ªáu!")
        print("üí° M·∫πo: B·∫°n c√≥ th·ªÉ d√πng DB Browser for SQLite ƒë·ªÉ xem GUI")
        print("üì• T·∫£i t·∫°i: https://sqlitebrowser.org/")
        print("="*60)
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    main() 